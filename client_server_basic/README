Sepehr Raissian
sraissia@ucsc.edu
CMPE 156 
Assignment 1: basic server client remote shell

Files:
    src/            contains source files
    header/         contains source files headers
    bin/            contains executable files
    src/server.c    server code    
    src/client.c    client code
    src/stack.c     stack data structure
    src/node.c      stacks main node structure
    src/test.c      basic test file for various reasons
    src/testStack.c test file for stack, making sure there is no memory leak
    testScript.py   given sample test script

Instructions:
    1. make
    2. ./bin/server 8080
    3. ./bin/client 127.0.0.1 8080
        a. client sends commands to server and gets the results back.
        b. To only support given functions, if the executed command doesn't return a response it tells client command not found.
        c. to exit, type exit

client and server must agree on a protocol
    1. server proposes a buffer_size. (for this assignment servers buffer_size is immidiately accepted)
    2. client sends a random key (done manually for now) to the server and wants that back when server is finished sending the messages.
        this is the second validation of server is done setting messages.
    3. server sends its stack size, client keeps on getting messages and increments its stack counter until it matches the servers stack size.
        first validation of server is done when client reaches the same stack size of server. If stack size is 0 its indication of an error.

server's task:
    1. accepts a command from the client, executes it. Server will add to its stack each message of size buffer_size. 
    2. server sends its stack size to the client, indicating its going to start setting the messages.
    3. once server stack is empty, it sends back the key, indicating it has completed its task.
    4. repeat

Testing: testing was done manually 
to compress: tar -zcvf file.tar.gz dir_name
to uncompress: tar zxvf file.tar.gz
