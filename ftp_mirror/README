Sepehr Raissian
sraissia@ucsc.edu
CMPE 156 
Assignment 2: ftp mirror

Files:
    src/            contains source files
    header/         contains source files headers
    bin/            contains executable files
    src/server.c    server code    
    src/client.c    client code
    src/stack.c     stack data structure

Instructions:
    1. make
    2. ./bin/server 4200, ./bin/server 8080, ... ports have to be included in the server-info.txt
    3. ./bin/client server-info.txt number-of-connections filename
    filenames path starts in the ftp_mirror, for any file with path just include the path like so bin/file

1. tries to make connection as many as provided 
2. returns the file size
3. based on number of connections it has established it makes that many threads
4. each thread downloads a frament of the file, it is decied by the file size / number conections established
5. if file is still too big after fragmenting it will keep on dividing unitl it reaches a reasonable size
6. in the main thread client.main waits until all the threads are done with their task
7. then writes the read file to a filename appended with 01 as indicating of copy to the path reached for the file

doesn't work well with big files:
    defenitly has to do with my buffering allocation. At some point my fragmenation gets inccorect

to compress: tar -zcvf file.tar.gz dir_name
to uncompress: tar zxvf file.tar.gz
